(j/with-connection db 
   (j/with-query-results rs ["select object_name,object_id,created from all_objects where rownum<10"] 
     ; rs will be a sequence of maps, 
     ; one for each record in the result set. 
     (dorun (map #(println (:title %)) rs))))

(def cells (j/query db
  ["select object_name oname,object_id,created,object_type from all_objects where rownum<10"]
  {:as-arrays? true :keywordize? false}))

(let [wb (create-workbook "objects"
                          cells
                          )]
   (save-workbook! "objects.xlsx" wb))

(->> (load-workbook "test-temp1.xlsx")
     (select-sheet "Sheet1")
     (select-columns {:A :name, :B :price}))


(->> (load-workbook "test-temp1.xlsx")
     (select-sheet "Sheet1")
     row-seq
     ;;(remove nil?)
     (map cell-seq)
     (map #(map read-cell %)))

(let [wb (load-workbook "test-temp1.xlsx")
                 s (select-sheet "Sheet1" wb)
                 ]
            ;; (read-cell c)
             (set-cell! (select-cell "A3" s) 5)
             (set-cell! (select-cell "B11" s) 99)
            ;;(read-cell c)
             (save-workbook! "test-temp1.xlsx" wb))

(->> (load-workbook "test-temp1.xlsx")
     (select-sheet "Sheet1")
     row-seq
     ;;(remove nil?)
     (map #(list %1 %2) (range 1 100000000))
     (map #(for [c "ABCDEF"] (read-cell (select-cell (str c (first %)) )))))


(let [wb (load-workbook "test-temp1.xlsx")
                 s (select-sheet "Sheet1" wb)
      ]           
    (->> s
     (row-seq)
     (map #(list %1 %2) (range 1 100000000))
     (map #(for [c "ABC"] (read-cell (select-cell (str c (first %)) s))))
     (create-workbook "sheet1")
     (save-workbook! "test-temp2.xlsx")
     )
     )

(let [wb (load-workbook "test-temp2.xlsx")
                 s (select-sheet "sheet1" wb)
                 ]
            ;; (read-cell c)
             (set-cell! (select-cell "A3" s) "third")
             (set-cell! (select-cell "B11" s) 99)
            ;;(read-cell c)
             (save-workbook! "test-temp2.xlsx" wb))

(let [chars "ABCDEFGHIJKLMNOPQRSTUVWXYZ"]
	(for [c chars] 
		(str c)))   

(reduce into (into [] (for [i (cons nil "ABCD")] (into [] (for [j "ABCDEFGHIJKLMNOPQRSTUVWXYZ"] (str i j))))))    

(loop [i 1 r vvv]
	(if-not (first r)
	  	nil
	  	(do 
	  	  (println i (first r))
	  	  (recur (inc i) (rest r)))))

(defn set-cells [rows s]
  (loop [i 1 r rows]
    (if-not (first r)
      nil
      (do
        ;;(map (fn [c d] (set-cell! (select-cell (str c i) s) d)) col-names (first r))
        ;;(println (map (fn [c d] (read-cell (select-cell (str c i) s))) col-names (first r)))
        (loop [n col-names c (first r)]
          (if-not (first c)
            nil
            (do (set-cell! (select-cell (str (first n) i) s) (first c))
              ;;(println (str (first n) i) (read-cell (select-cell (str (first n) i) s)))
              (recur (rest n) (rest c)))))
        (recur (inc i) (rest r))))))

(let [wb (load-workbook "test-temp2.xlsx")
                 s (select-sheet "sheet1" wb)
                 ]
            (set-cells [[11 12] [21 22]] s)
             (save-workbook! "test-temp2.xlsx" wb)
             )

If side effects is all what is needed, I would skip the creation of lazy seqs and do it with reduce:

user=> (defn mapc [f coll] (reduce (fn [_ v] (f v)) nil coll))
#'user/mapc
user=> (mapc println [1 2 3])
1
2
3
nil

(map #(map (fn [cn d] [cn %1 d]) col-names %2) (range 2 100) [[11 12] [21 22]])

(let [wb (load-workbook "test-temp2.xlsx")
                 s (select-sheet "sheet1" wb)
                 rows (map #(map (fn [cn d] [cn %1 d]) col-names %2) (range 2 100) [[11 12] [21 22]])
                 ]
            (doseq [r rows] 
            	(doseq [c r] (set-cell! (select-cell (str (nth c 0) (nth c 1)) s) (nth c 2))))
             (save-workbook! "test-temp2.xlsx" wb))

     

 (str/split "ABC345" #"(?<=[A-Z])(?=[0-9])")
 (defn row-cell-map [begin-cell-name data]
  (let [[cname rnum] (str/split begin-cell-name #"(?<=[A-Z])(?=[0-9])")
  cnames (seqb col-names cname)]
    (map #(map (fn [cn d] [cn %1 d]) cnames %2) (range rnum 100) data))

(def ss (->>  (validate-args ["-w" "(sheet1(A1),sheet2)" "q2x"]) :options :sheet))
 (some #(map? %) ss)
 (for [s ss] (if (map? s) s {s ["A1"]}))

(defn update-wb [wb-name coll-sheets coll-data]
(let [wb (load-workbook wb-name)
      ss (for [s ss] (if (map? s) (first (vec s)) [s ["A1"]])) ]
      (loop [s (first ss) d (first coll-data)]
      	(if-not s
      	 nil
      	 ;;(save-workbook! "test-temp2.xlsx" wb) 
         (let [sheet (select-sheet (first s) wb)
         	   rows (row-cell-map (first (second s)) d)]
            (doseq [r rows] 
            	(doseq [c r]
            	(println c sheet) 
            	;;(set-cell! (select-cell (str (nth c 0) (nth c 1)) sheet) (nth c 2))
            	))
            	(recur (rest ss) (rest coll-data)))))
             (save-workbook! "test-temp2.xlsx" wb)))
(update-wb "test-temp2.xlsx" ss [[[11 12] [12 21]] [[22 22] [32 31]]])  

(defn update-sheet [sheet start-cell-name data]
   (let [rows (row-cell-map start-cell-name data)]
            (doseq [r rows] 
            	(doseq [c r]
            	(set-cell! (select-cell (str (nth c 0) (nth c 1)) sheet) (nth c 2))
            	)))) 

(def ss (->>  (validate-args ["-w" "(sheet1(B2))" "q2x"]) :options :sheet))

(defn update-wb [wb-name opt data]
(let [wb (load-workbook wb-name)
	  ss-opt (->> opt :sheet)
      ss (for [s ss-opt] (if (map? s) (first (vec s)) [s ["A1"]]))]
      (loop [s ss
      		d data
      		]
        (if-not (first s)
        	nil
        	(let [sheet (select-sheet (first (first s)) wb)
        			first-cell-name (first (second (first s)))
        			data (first d)]
        	;;(println (first (first s)) (first (second (first s))) data)   
            (update-sheet	sheet first-cell-name data)
      	    (recur (rest s) (rest d)))))
      	(save-workbook! "test-temp2.xlsx" wb)))

(let [{:keys [action options exit-message ok?]} (validate-args ["-w" "(sheet1(B2),sheet2)" "q2x"])]
 	(update-wb "test-temp2.xlsx" options [[[11 12 ] [21 22]] [[31 32 ] [41 42]]]))

(let [{:keys [action options exit-message ok?]} (validate-args ["-s" ".\20180426自付一调查.sql" "q2x"])]
 	(println (get-sqls options)))

(def cells (j/query db-
   ["select object_name oname,object_id,created,object_type from all_objects where rownum<50000"]
   {:as-arrays? true :keywordize? false }))

(let!!!!!! [sname "objs"
      limit 5000
	  cs cells
	  wb-name "objs.xlsx"
	  wb (create-workbook sname [(first cells)])
	  sheet (select-sheet sname wb)]
  (loop [lcs (rest cs) rn 1]
  	(if-not (first lcs)
  	  nil
  	  (do (add-row! sheet (first lcs))
  	      (if (< rn limit)
  	          (recur (rest lcs) (inc rn))
  	          (do (save-workbook! wb-name wb)
  	              (recur (rest lcs) 1))
  	          )))
  	          )
	(save-workbook! wb-name wb)
	)

(defn create-wb [wb-name opt datas]
(let [wb (create-workbook "objects"
                          cells
                          )]
   (save-workbook! "objects.xlsx" wb))

(def c (j/get-connection db-))
(def s (j/prepare-statement c "select * from all_objects" {:fetch-size 100}))

(def ss (->>  (validate-args ["-w" "(sheet1)" "q2x"]) :options :sheet))
(defn create-wb [wb-name opt datas]
(let [ss-opt (->> opt :sheet)
	  paras (reduce into [] (map vector ss-opt datas))
      wb (apply create-workbook paras)]
      (save-workbook! wb-name wb)))

(let [{:keys [action options exit-message ok?]} (validate-args ["-w" "(sheet1,sheet2)" "-s" "test.sql" "q2x"])]
 	(create-wb "test-temp2.xlsx" options [[["a" "b"] [11 12 ] [21 22]] [["cc" "dd"]  [11 12 ] [21 22]]]))


--get-data
(defn get-data [db-spec sqls]
  (reduce conj [] (map (fn [sql] (j/query db-spec [sql] {:as-arrays? true, :keywordize? false}))  sqls)))


(defn q2x! [opts db-spec]
  (let [sqls (get-sqls opts)
 sheets (:sheet opts)
 outfile (:outfile opts)]
 (if-not (= (count sqls) (count sheets))
    "error count"
    (let [data (get-data db-spec sqls)]
      (if (some map? (:sheet opts))
 	      (update-wb outfile opts data)
 	      (create-wb outfile opts data))))))


 (-main "-w" "(Sheet1(a2),Sheet1(a4))" "-s" "test.sql" "-o" "objs.xlsx" "q2x")

 (def data (->> (load-workbook "9087-1.xls")
               (select-sheet "诊疗项目（门诊+住院_2018）")
               (select-columns {:a "ca", :b "cb",:d "CD"})))

(j/insert-multi! db- "tmp9087" (rest data))

 (def ins-sql (first (read-string (slurp "test-ins.sql"))))
 (into {} (map (fn [col name] [(keyword col) (keyword name)])
                        col-names (second ins-sql)))

(defn extract-wb [wb-name opt f]
            (let [wb (load-workbook wb-name)
                  ]
              ))  

(let [{:keys [action options exit-message ok?]} 
(validate-args ["-w" "(诊疗项目（门诊+住院_2018）(a1,e10),诊疗项目（仅门诊）)" "-s" "test.sql" "-o" "9087-1.xls" "q2x"])
wb-name (:outfile options)
wb (load-workbook wb-name)
ss-opt (:sheet options)
ss (for [s ss-opt] (if (map? s) (first (vec s)) [s ["A1" "A1"]]))
ins-sqls (read-string (slurp "test-ins.sql"))]
(if (not= (count ss) (count ins-sqls))
 "error: Not equ between sheets and sqls!"
(reduce (fn [ret [s q]] 
  (let [sname (first s)
  		[cell-begin cell-end] (second s)
  		col-begin (re-find #"[A-Za-z]+" cell-begin)
  		col-end (re-find #"[A-Za-z]+" cell-end)
  		row-begin (Integer. (re-find #"[0-9]+" cell-begin))
  		row-end (Integer. (re-find #"[0-9]+" cell-end))
  		col-spec (into {} (map (fn [col name] [(keyword col) (keyword name)])
                        (seqb col-names col-begin col-end) (second ins-sql)))
  		]
        (conj ret (->> wb (select-sheet sname) (select-columns col-spec) (#(sub-rows % row-begin row-end)))) )) [] (map vector ss ins-sql))))